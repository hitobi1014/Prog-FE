# 실행될 stage 지정 (위에서부터 아래로 진행)
stages:
  - build
  - package
  - deploy
  - frontend_build
  - frontend_package
  - frontend_deploy

build: # JOB 이름
  # 사용될 이미지 설정
  image: gradle:8.4.0-jdk17 # gradle - java 이미지 지정
  # stage 설정
  stage: build
  # 실행될 script 설정
  script:
    - cd Back-End
    - echo [INFO] YML Settings
    - cd src/main/resources
    - echo "$APPLICATION_YML" > "application.yml" # gitlab APPLICATION_YML을 이용하여 application.yml 파일 생성
    - echo "$APPLICATION_DATASOURCE_YML" > "application-datasource.yml"
    - echo "$APPLICATION_S3_YML" > "application-s3.yml"
    - echo "$APPLICATION_JWT_YML" > "application-jwt.yml"
    - echo "$APPLICATION_EMAIL_YML" > "application-email.yml"
    - echo [INFO] spring-boot project build
    - cd ../../.. # 프로젝트 폴더로 경로 이동
    - chmod +x gradlew # gradle 권한 부여
    - ./gradlew clean
    - ./gradlew bootjar
  # artifacts 설정 (bulld를 통해 생성된 파일을 job artifacts에 보관하여 다음에 수행되는 JOB에서 가져다 활용할 수 있게 도와줌)
  artifacts:
    # 보관이 이루어질 경로 설정
    paths:
      - Back-End/build/libs/*.jar # Dockerfile에 지정한 경로로 지정
    # 유효기간 설정
    expire_in: 1 days
  # JOB이 수행될 branch 설정 (설정된 branch에 push가 발생될 시 JOB 수행)
  only:
    - BE

package:
  image: docker:latest
  stage: package
  # service 설정 (설정한 image가 작업이 이루어지는 동안 실행되는 docker 이미지)
  services:
    - docker:dind
    # script가 실행 전 수행 될 script
  before_script:
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD   # GitLab Container Registry에 로그인
  # 실행될 script 설정
  script:
    - echo [INFO] Start package stage
    - echo [INFO] CI_REGISTRY_USER       $CI_REGISTRY_USER # docker hub id
    - echo [INFO] CI_REGISTRY_PASSWORD   $CI_REGISTRY_PASSWORD # docker hub password or token
    - echo [INFO] CI_REGISTRY_IMAGE      $CI_REGISTRY_IMAGE
    - echo [INFO] SPRING_IMAGE_NAME      $SPRING_IMAGE_NAME
    - echo [INFO] NGINX_IMAGE_NAME       $NGINX_IMAGE_NAME
    - echo [INFO] DOCKER_REGISTRY_USER   $DOCKER_REGISTRY_USER
    - echo [INFO] DOCKER_REGISTRY_PWD    $DOCKER_REGISTRY_PASSWORD
    - echo [INFO] Spring docker project build
    - echo "now dir"
    - pwd
    - cd Back-End
    - docker build -t $DOCKER_REGISTRY_USER/$SPRING_IMAGE_NAME .   # Dockerfile로 build
    - docker push $DOCKER_REGISTRY_USER/$SPRING_IMAGE_NAME:latest   # Container Registry에 image push
    - echo [INFO] Nginx docker build
    - cd nginx # nginx .conf 위치로 이동
    - docker build -t $DOCKER_REGISTRY_USER/$NGINX_IMAGE_NAME .
    - docker push $DOCKER_REGISTRY_USER/$NGINX_IMAGE_NAME:latest
  # script가 실행된 후 수행 될 script
  after_script:
    - docker logout   # GitLab Container Registry 로그아웃
  # JOB이 수행될 branch 설정 (설정된 branch에 push가 발생될 시 JOB 수행)
  only:
    - BE

frontend_package:
  image: docker:latest
  stage: frontend_package
  services:
    - docker:dind
  before_script:
    - echo [INFO] Packaging the frontend project
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD
  script:
    - cd Front-End
    - echo "$ENV_PRODUCTION" > ".env.production"
    - echo "$ENV" > ".env"
    - docker build -t $DOCKER_REGISTRY_USER/$REACT_IMAGE_NAME .
    - docker push $DOCKER_REGISTRY_USER/$REACT_IMAGE_NAME:latest
  after_script:
    - docker logout
  only:
    - FE # 브랜치명

deploy: # JOB 이름
  image: docker:latest
  # stage 설정
  stage: deploy
  services:
    - docker:dind
  # script가 실행 전 수행 될 script
  before_script:
    - echo [INFO] docker deploy start!
    - docker login $CI_REGISTRY -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD   # GitLab Container Registry에 로그인
  # 실행될 script 설정
  script:
    - docker volume prune -f # 사용되지 않는 컨테이너, 이미지 삭제 및 볼륨 정리
    - cd Back-End
    - docker-compose down # docker-compose 내리기
    - docker-compose pull # docker images pull
    - docker-compose build # docker-compose 빌드
    - docker-compose up -d # docker-compose 백그라운드 실행
  # script가 실행된 후 수행 될 script
  after_script:
    - docker logout   # GitLab Container Registry 로그아웃
    - echo [INFO] docker deploy end!
  # JOB이 수행될 branch 설정 (설정된 branch에 push가 발생될 시 JOB 수행)
  only:
    - BE

frontend_deploy:
  image: docker:latest
  stage: frontend_deploy
  services:
    - docker:dind
  before_script:
    - echo [INFO] Deploying the frontend project
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD
  script:
    - docker volume prune -f
    - cd Front-End
    - docker-compose down
    - docker-compose pull
    - docker-compose build
    - docker-compose up -d
  after_script:
    - docker logout
  only:
    - FE
